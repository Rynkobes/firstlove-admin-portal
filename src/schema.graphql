type Member {
	memberID: ID #@cypher(statement: "CALL apoc.create.uuid()")
	firstName: String
	lastName: String
	email: String
	phoneNumber: String
	whatsAppNumber: String
	dob: DateofBirth @relation(name: "WAS_BORN_ON", direction: "OUT")
	ministry: [Sonta] @relation(name: "BELONGS_TO", direction: "OUT")
	occupation: [Occupation] @relation(name: "HAS_OCCUPATION", direction: "OUT")
	bacenta: [Bacenta] @relation(name: "BELONGS_TO", direction: "OUT")
	gender: Gender @relation(name: "HAS_GENDER", direction: "OUT")
	maritalStatus: MaritalStatus @relation(name: "HAS_MARITAL_STATUS", direction: "OUT")
}

type Gender {
	gender: String
	members: [Member] @relation(name: "HAS_GENDER", direction: "IN")
}

type MaritalStatus {
	status: String
	members: [Member] @relation(name: "HAS_MARITAL_STATUS", direction: "IN")
}

type DateofBirth {
	date: Date
	members: [Member] @relation(name: "WAS_BORN_ON", direction: "IN")
}
# type TimeGraph {
# 	date: Date
# 	members: [Member] @relation(name: "WAS_BORN_ON", direction: "IN")
# }

type Occupation {
	occupation: String
	members: [Member] @relation(name: "HAS_OCCUPATION", direction: "IN")
}

type Town {
	name: String
	leader: Member @relation(name: "LEADS", direction: "IN")
	basontas: [Sonta] @relation(name: "HAS_SONTA", direction: "OUT")
}

type Community {
	name: String
	leader: Member @relation(name: "LEADS", direction: "IN")
	town: Town @relation(name: "HAS_COMMUNITY", direction: "IN")
}

type Centre {
	name: String
	community: Community @relation(name: "HAS_CENTRE", direction: "IN")
	bacentas: [Bacenta] @relation(name: "HAS_BACENTA", direction: "IN")
	leader: Member @relation(name: "LEADS", direction: "IN")
	members: [Member] @relation(name: "BELONGS_TO", direction: "IN")
}

type Bacenta {
	name: String
	centre: Centre @relation(name: "HAS_BACENTA", direction: "IN")
	leader: Member @relation(name: "LEADS", direction: "IN")
	members: [Member] @relation(name: "BELONGS_TO", direction: "IN")
}

type Sonta {
	name: String
	leader: Member @relation(name: "LEADS", direction: "IN")
	town: Town @relation(name: "HAS_SONTA", direction: "IN")
	members: [Member] @relation(name: "BELONGS_TO", direction: "IN")
}

#total number of
type Query {
	townCount: Int! @cypher(statement: "MATCH (t:Town) RETURN COUNT(t)")
	communityCount: Int! @cypher(statement: "MATCH (c:Community) RETURN COUNT(c)")
	centreCount: Int! @cypher(statement: "MATCH (c:Centre) RETURN COUNT(c)")
	sontaCount: Int! @cypher(statement: "MATCH (s:Sonta) RETURN COUNT(s)")
	memberCount: Int! @cypher(statement: "MATCH (m:Member) RETURN COUNT(m)")
	fuzzyMemberByName(searchKey: String!):[Member] @cypher(statement: "CALL db.index.fulltext.queryNodes('memberNameIndex', $searchKey+'~') YIELD node RETURN node")
}

# type Query {
# 	fuzzyMemberByName(
# 		searchKey: String! 
# 		):[Member]
# 		@cypher(statement: 
# 		"""
# 		CALL db.index.fulltext.queryNodes('memberNameIndex', $searchKey+'~') 
# 		YIELD node
# 		RETURN node
# 		"""
# 		)
# }

type Mutation {
	AddMember(
		firstName: String!
		lastName: String!
		email: String!
		phoneNumber: String!
		whatsAppNumber: String
		dob: String!
		ministry: String
		occupation: String
		bacenta: String!
		maritalStatus: String!
		gender: String!
	): Member
	@cypher(statement:
	"""
	MERGE (m:Member {email:$email})
	ON CREATE SET
		m.memberId = apoc.create.uuid(),
		m.firstName = $firstName,
		m.lastName = $lastName,
		m.email = $email,
		m.phoneNumber = $phoneNumber,
		m.whatsAppNumber = $whatsAppNumber
	MERGE (m)-[:WAS_BORN_ON]-> (t:TimeGraph {date: $dob})
	MERGE (m)-[:BELONGS_TO]-> (s:Sonta {name:$ministry})
	MERGE (m)-[:HAS_OCCUPATION]-> (o:Occuptation {occupation:$occupation})
	MERGE (m)-[:BELONGS_TO]-> (b:Bacenta {name:$bacenta})
	MERGE (m)-[:HAS_MARITAL_STATUS]-> (ms:maritalStatus {status:$maritalStatus})
	MERGE (m)-[:HAS_GENDER]-> (g:Gender {gender: $gender})
	RETURN m
	"""
	)
}
